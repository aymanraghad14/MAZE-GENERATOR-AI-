import pygame # type: ignore
from random import choice
RES = WIDTH, HEIGHT = 900, 600
TILE = 50
cols, rows = WIDTH // TILE, HEIGHT // TILE
FPS = 30

pygame.init()
sc = pygame.display.set_mode(RES)
pygame.display.set_caption("Depth First Search (DFS) Maze Generator")
clock = pygame.time.Clock()

class Cell:
    def __init__(self, x, y):
        self.x, self.y = x, y
        self.walls = {'top': True, 'right': True, 'bottom': True, 'left': True}
        self.visited = False

    def draw_current_cell(self):
        x, y = self.x * TILE, self.y * TILE
        pygame.draw.rect(sc, pygame.Color('pink'), 
                        (x + 2, y + 2, TILE - 2, TILE - 2), border_radius=20)

    def draw(self):
        x, y = self.x * TILE, self.y * TILE
        if self.visited:
            pygame.draw.rect(sc, pygame.Color('#101010'), (x, y, TILE, TILE))
        
        
        if self.walls['top']:
            pygame.draw.line(sc, pygame.Color('green'), (x, y), (x + TILE, y), 3)
        if self.walls['right']:
            pygame.draw.line(sc, pygame.Color('green'), (x + TILE, y), (x + TILE, y + TILE), 3)
        if self.walls['bottom']:
            pygame.draw.line(sc, pygame.Color('green'), (x + TILE, y + TILE), (x, y + TILE), 3)
        if self.walls['left']:
            pygame.draw.line(sc, pygame.Color('green'), (x, y + TILE), (x, y), 3)

    def check_cell(self, x, y):
        if x < 0 or x >= cols or y < 0 or y >= rows:
            return None
        return grid_cells[x + y * cols]

    def check_neighbors(self):
        neighbors = []
        top = self.check_cell(self.x, self.y - 1)
        right = self.check_cell(self.x + 1, self.y)
        bottom = self.check_cell(self.x, self.y + 1)
        left = self.check_cell(self.x - 1, self.y)

        if top and not top.visited:
            neighbors.append(top)
        if right and not right.visited:
            neighbors.append(right)
        if bottom and not bottom.visited:
            neighbors.append(bottom)
        if left and not left.visited:
            neighbors.append(left)

        return choice(neighbors) if neighbors else None

def remove_walls(current, next):
    dx = current.x - next.x
    dy = current.y - next.y
    
    if dx == 1:  
        current.walls['left'] = False
        next.walls['right'] = False
    elif dx == -1:  
        current.walls['right'] = False
        next.walls['left'] = False
    
    if dy == 1:  
        current.walls['top'] = False
        next.walls['bottom'] = False
    elif dy == -1:  
        current.walls['bottom'] = False
        next.walls['top'] = False


grid_cells = [Cell(col, row) for row in range(rows) for col in range(cols)]
current_cell = grid_cells[0]
stack = []
generating = True  


running = True
while running:
    sc.fill(pygame.Color('purple'))
    
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            running = False
    
    
    for cell in grid_cells:
        cell.draw()
    
    if generating:  
        current_cell.visited = True
        current_cell.draw_current_cell()
        
        next_cell = current_cell.check_neighbors()
        if next_cell:
            next_cell.visited = True
            remove_walls(current_cell, next_cell)
            stack.append(current_cell)
            current_cell = next_cell
        elif stack:
            current_cell = stack.pop()
        else:
            generating = False 
    
    pygame.display.flip()
    clock.tick(10)

pygame.quit()
